# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
      with:
        snapshot-dependency-file-name: '/dependency-snapshots'

    - name: Setup docker engine
      run: | 
           apt-get update 
           apt-get install ca-certificates curl &&
           install -m 0755 -d /etc/apt/keyrings &&
           curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc &&
           chmod a+r /etc/apt/keyrings/docker.asc &&
           echo \ &&
           "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \ &&
           $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \ &&
           tee /etc/apt/sources.list.d/docker.list > /dev/null &&
           apt-get update &&
           apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &&


    - name: Build and Push Docker Image
      run: | 
           docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/psic-proj:fromGIT . &&
           docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_ACCESS_TOKEN }} &&
           docker push ${{ secrets.DOCKERHUB_USERNAME }}/psic-proj:fromGIT &&
